// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kerok-kristoffer/backendStub/db/sqlc (interfaces: UserAccount)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/kerok-kristoffer/backendStub/db/sqlc"
)

// MockUserAccount is a mock of UserAccount interface.
type MockUserAccount struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccountMockRecorder
}

// MockUserAccountMockRecorder is the mock recorder for MockUserAccount.
type MockUserAccountMockRecorder struct {
	mock *MockUserAccount
}

// NewMockUserAccount creates a new mock instance.
func NewMockUserAccount(ctrl *gomock.Controller) *MockUserAccount {
	mock := &MockUserAccount{ctrl: ctrl}
	mock.recorder = &MockUserAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccount) EXPECT() *MockUserAccountMockRecorder {
	return m.recorder
}

// CreateBatch mocks base method.
func (m *MockUserAccount) CreateBatch(arg0 context.Context, arg1 db.CreateBatchParams) (db.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", arg0, arg1)
	ret0, _ := ret[0].(db.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockUserAccountMockRecorder) CreateBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockUserAccount)(nil).CreateBatch), arg0, arg1)
}

// CreateBatchItem mocks base method.
func (m *MockUserAccount) CreateBatchItem(arg0 context.Context, arg1 db.CreateBatchItemParams) (db.BatchItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatchItem", arg0, arg1)
	ret0, _ := ret[0].(db.BatchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatchItem indicates an expected call of CreateBatchItem.
func (mr *MockUserAccountMockRecorder) CreateBatchItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchItem", reflect.TypeOf((*MockUserAccount)(nil).CreateBatchItem), arg0, arg1)
}

// CreateCurrency mocks base method.
func (m *MockUserAccount) CreateCurrency(arg0 context.Context, arg1 string) (db.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrency", arg0, arg1)
	ret0, _ := ret[0].(db.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCurrency indicates an expected call of CreateCurrency.
func (mr *MockUserAccountMockRecorder) CreateCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrency", reflect.TypeOf((*MockUserAccount)(nil).CreateCurrency), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockUserAccount) CreateEntry(arg0 context.Context, arg1 db.CreateEntryParams) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockUserAccountMockRecorder) CreateEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockUserAccount)(nil).CreateEntry), arg0, arg1)
}

// CreateFormula mocks base method.
func (m *MockUserAccount) CreateFormula(arg0 context.Context, arg1 db.CreateFormulaParams) (db.Formula, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFormula", arg0, arg1)
	ret0, _ := ret[0].(db.Formula)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFormula indicates an expected call of CreateFormula.
func (mr *MockUserAccountMockRecorder) CreateFormula(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormula", reflect.TypeOf((*MockUserAccount)(nil).CreateFormula), arg0, arg1)
}

// CreateFormulaIngredient mocks base method.
func (m *MockUserAccount) CreateFormulaIngredient(arg0 context.Context, arg1 db.CreateFormulaIngredientParams) (db.FormulaIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFormulaIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.FormulaIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFormulaIngredient indicates an expected call of CreateFormulaIngredient.
func (mr *MockUserAccountMockRecorder) CreateFormulaIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormulaIngredient", reflect.TypeOf((*MockUserAccount)(nil).CreateFormulaIngredient), arg0, arg1)
}

// CreateIngredient mocks base method.
func (m *MockUserAccount) CreateIngredient(arg0 context.Context, arg1 db.CreateIngredientParams) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngredient indicates an expected call of CreateIngredient.
func (mr *MockUserAccountMockRecorder) CreateIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngredient", reflect.TypeOf((*MockUserAccount)(nil).CreateIngredient), arg0, arg1)
}

// CreateIngredientFunction mocks base method.
func (m *MockUserAccount) CreateIngredientFunction(arg0 context.Context, arg1 db.CreateIngredientFunctionParams) (db.IngredientFunction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngredientFunction", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientFunction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngredientFunction indicates an expected call of CreateIngredientFunction.
func (mr *MockUserAccountMockRecorder) CreateIngredientFunction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngredientFunction", reflect.TypeOf((*MockUserAccount)(nil).CreateIngredientFunction), arg0, arg1)
}

// CreateIngredientTag mocks base method.
func (m *MockUserAccount) CreateIngredientTag(arg0 context.Context, arg1 db.CreateIngredientTagParams) (db.IngredientTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngredientTag", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngredientTag indicates an expected call of CreateIngredientTag.
func (mr *MockUserAccountMockRecorder) CreateIngredientTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngredientTag", reflect.TypeOf((*MockUserAccount)(nil).CreateIngredientTag), arg0, arg1)
}

// CreateIngredientTagMap mocks base method.
func (m *MockUserAccount) CreateIngredientTagMap(arg0 context.Context, arg1 db.CreateIngredientTagMapParams) (db.IngredientTagMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngredientTagMap", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientTagMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngredientTagMap indicates an expected call of CreateIngredientTagMap.
func (mr *MockUserAccountMockRecorder) CreateIngredientTagMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngredientTagMap", reflect.TypeOf((*MockUserAccount)(nil).CreateIngredientTagMap), arg0, arg1)
}

// CreateInventoryItem mocks base method.
func (m *MockUserAccount) CreateInventoryItem(arg0 context.Context, arg1 db.CreateInventoryItemParams) (db.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(db.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInventoryItem indicates an expected call of CreateInventoryItem.
func (mr *MockUserAccountMockRecorder) CreateInventoryItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInventoryItem", reflect.TypeOf((*MockUserAccount)(nil).CreateInventoryItem), arg0, arg1)
}

// CreatePhase mocks base method.
func (m *MockUserAccount) CreatePhase(arg0 context.Context, arg1 db.CreatePhaseParams) (db.Phase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePhase", arg0, arg1)
	ret0, _ := ret[0].(db.Phase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePhase indicates an expected call of CreatePhase.
func (mr *MockUserAccountMockRecorder) CreatePhase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhase", reflect.TypeOf((*MockUserAccount)(nil).CreatePhase), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockUserAccount) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockUserAccountMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockUserAccount)(nil).CreateSession), arg0, arg1)
}

// CreateStripeEntry mocks base method.
func (m *MockUserAccount) CreateStripeEntry(arg0 context.Context, arg1 db.CreateStripeEntryParams) (db.Stripe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStripeEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Stripe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStripeEntry indicates an expected call of CreateStripeEntry.
func (mr *MockUserAccountMockRecorder) CreateStripeEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStripeEntry", reflect.TypeOf((*MockUserAccount)(nil).CreateStripeEntry), arg0, arg1)
}

// CreateStripePlan mocks base method.
func (m *MockUserAccount) CreateStripePlan(arg0 context.Context, arg1 db.CreateStripePlanParams) (db.StripePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStripePlan", arg0, arg1)
	ret0, _ := ret[0].(db.StripePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStripePlan indicates an expected call of CreateStripePlan.
func (mr *MockUserAccountMockRecorder) CreateStripePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStripePlan", reflect.TypeOf((*MockUserAccount)(nil).CreateStripePlan), arg0, arg1)
}

// CreateTester mocks base method.
func (m *MockUserAccount) CreateTester(arg0 context.Context, arg1 string) (db.Tester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTester", arg0, arg1)
	ret0, _ := ret[0].(db.Tester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTester indicates an expected call of CreateTester.
func (mr *MockUserAccountMockRecorder) CreateTester(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTester", reflect.TypeOf((*MockUserAccount)(nil).CreateTester), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockUserAccount) CreateTransfer(arg0 context.Context, arg1 db.CreateTransferParams) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockUserAccountMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockUserAccount)(nil).CreateTransfer), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockUserAccount) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserAccountMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserAccount)(nil).CreateUser), arg0, arg1)
}

// CreateVersion mocks base method.
func (m *MockUserAccount) CreateVersion(arg0 context.Context, arg1 sql.NullFloat64) (db.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersion", arg0, arg1)
	ret0, _ := ret[0].(db.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVersion indicates an expected call of CreateVersion.
func (mr *MockUserAccountMockRecorder) CreateVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockUserAccount)(nil).CreateVersion), arg0, arg1)
}

// DeleteBatch mocks base method.
func (m *MockUserAccount) DeleteBatch(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockUserAccountMockRecorder) DeleteBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockUserAccount)(nil).DeleteBatch), arg0, arg1)
}

// DeleteBatchItem mocks base method.
func (m *MockUserAccount) DeleteBatchItem(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatchItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatchItem indicates an expected call of DeleteBatchItem.
func (mr *MockUserAccountMockRecorder) DeleteBatchItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatchItem", reflect.TypeOf((*MockUserAccount)(nil).DeleteBatchItem), arg0, arg1)
}

// DeleteCurrency mocks base method.
func (m *MockUserAccount) DeleteCurrency(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCurrency", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCurrency indicates an expected call of DeleteCurrency.
func (mr *MockUserAccountMockRecorder) DeleteCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurrency", reflect.TypeOf((*MockUserAccount)(nil).DeleteCurrency), arg0, arg1)
}

// DeleteEntry mocks base method.
func (m *MockUserAccount) DeleteEntry(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockUserAccountMockRecorder) DeleteEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockUserAccount)(nil).DeleteEntry), arg0, arg1)
}

// DeleteFormula mocks base method.
func (m *MockUserAccount) DeleteFormula(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFormula", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFormula indicates an expected call of DeleteFormula.
func (mr *MockUserAccountMockRecorder) DeleteFormula(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFormula", reflect.TypeOf((*MockUserAccount)(nil).DeleteFormula), arg0, arg1)
}

// DeleteFormulaIngredient mocks base method.
func (m *MockUserAccount) DeleteFormulaIngredient(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFormulaIngredient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFormulaIngredient indicates an expected call of DeleteFormulaIngredient.
func (mr *MockUserAccountMockRecorder) DeleteFormulaIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFormulaIngredient", reflect.TypeOf((*MockUserAccount)(nil).DeleteFormulaIngredient), arg0, arg1)
}

// DeleteFormulaIngredientsNotInUpdate mocks base method.
func (m *MockUserAccount) DeleteFormulaIngredientsNotInUpdate(arg0 context.Context, arg1 db.DeleteFormulaIngredientsNotInUpdateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFormulaIngredientsNotInUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFormulaIngredientsNotInUpdate indicates an expected call of DeleteFormulaIngredientsNotInUpdate.
func (mr *MockUserAccountMockRecorder) DeleteFormulaIngredientsNotInUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFormulaIngredientsNotInUpdate", reflect.TypeOf((*MockUserAccount)(nil).DeleteFormulaIngredientsNotInUpdate), arg0, arg1)
}

// DeleteIngredient mocks base method.
func (m *MockUserAccount) DeleteIngredient(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredient indicates an expected call of DeleteIngredient.
func (mr *MockUserAccountMockRecorder) DeleteIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredient", reflect.TypeOf((*MockUserAccount)(nil).DeleteIngredient), arg0, arg1)
}

// DeleteIngredientFunction mocks base method.
func (m *MockUserAccount) DeleteIngredientFunction(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredientFunction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredientFunction indicates an expected call of DeleteIngredientFunction.
func (mr *MockUserAccountMockRecorder) DeleteIngredientFunction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredientFunction", reflect.TypeOf((*MockUserAccount)(nil).DeleteIngredientFunction), arg0, arg1)
}

// DeleteIngredientTag mocks base method.
func (m *MockUserAccount) DeleteIngredientTag(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredientTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredientTag indicates an expected call of DeleteIngredientTag.
func (mr *MockUserAccountMockRecorder) DeleteIngredientTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredientTag", reflect.TypeOf((*MockUserAccount)(nil).DeleteIngredientTag), arg0, arg1)
}

// DeleteIngredientTagMap mocks base method.
func (m *MockUserAccount) DeleteIngredientTagMap(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredientTagMap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredientTagMap indicates an expected call of DeleteIngredientTagMap.
func (mr *MockUserAccountMockRecorder) DeleteIngredientTagMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredientTagMap", reflect.TypeOf((*MockUserAccount)(nil).DeleteIngredientTagMap), arg0, arg1)
}

// DeleteIngredientTagMapByIngredientId mocks base method.
func (m *MockUserAccount) DeleteIngredientTagMapByIngredientId(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredientTagMapByIngredientId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredientTagMapByIngredientId indicates an expected call of DeleteIngredientTagMapByIngredientId.
func (mr *MockUserAccountMockRecorder) DeleteIngredientTagMapByIngredientId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredientTagMapByIngredientId", reflect.TypeOf((*MockUserAccount)(nil).DeleteIngredientTagMapByIngredientId), arg0, arg1)
}

// DeleteIngredientsByUserId mocks base method.
func (m *MockUserAccount) DeleteIngredientsByUserId(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredientsByUserId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredientsByUserId indicates an expected call of DeleteIngredientsByUserId.
func (mr *MockUserAccountMockRecorder) DeleteIngredientsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredientsByUserId", reflect.TypeOf((*MockUserAccount)(nil).DeleteIngredientsByUserId), arg0, arg1)
}

// DeleteInventoryItem mocks base method.
func (m *MockUserAccount) DeleteInventoryItem(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInventoryItem indicates an expected call of DeleteInventoryItem.
func (mr *MockUserAccountMockRecorder) DeleteInventoryItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventoryItem", reflect.TypeOf((*MockUserAccount)(nil).DeleteInventoryItem), arg0, arg1)
}

// DeletePhase mocks base method.
func (m *MockUserAccount) DeletePhase(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePhase indicates an expected call of DeletePhase.
func (mr *MockUserAccountMockRecorder) DeletePhase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhase", reflect.TypeOf((*MockUserAccount)(nil).DeletePhase), arg0, arg1)
}

// DeleteTransfer mocks base method.
func (m *MockUserAccount) DeleteTransfer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransfer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransfer indicates an expected call of DeleteTransfer.
func (mr *MockUserAccountMockRecorder) DeleteTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransfer", reflect.TypeOf((*MockUserAccount)(nil).DeleteTransfer), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUserAccount) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserAccountMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserAccount)(nil).DeleteUser), arg0, arg1)
}

// GetBatch mocks base method.
func (m *MockUserAccount) GetBatch(arg0 context.Context, arg1 int64) (db.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatch", arg0, arg1)
	ret0, _ := ret[0].(db.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatch indicates an expected call of GetBatch.
func (mr *MockUserAccountMockRecorder) GetBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockUserAccount)(nil).GetBatch), arg0, arg1)
}

// GetBatchItem mocks base method.
func (m *MockUserAccount) GetBatchItem(arg0 context.Context, arg1 int64) (db.BatchItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchItem", arg0, arg1)
	ret0, _ := ret[0].(db.BatchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchItem indicates an expected call of GetBatchItem.
func (mr *MockUserAccountMockRecorder) GetBatchItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchItem", reflect.TypeOf((*MockUserAccount)(nil).GetBatchItem), arg0, arg1)
}

// GetCurrency mocks base method.
func (m *MockUserAccount) GetCurrency(arg0 context.Context, arg1 int64) (db.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", arg0, arg1)
	ret0, _ := ret[0].(db.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockUserAccountMockRecorder) GetCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockUserAccount)(nil).GetCurrency), arg0, arg1)
}

// GetEntryByUserId mocks base method.
func (m *MockUserAccount) GetEntryByUserId(arg0 context.Context, arg1 sql.NullInt64) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryByUserId", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryByUserId indicates an expected call of GetEntryByUserId.
func (mr *MockUserAccountMockRecorder) GetEntryByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryByUserId", reflect.TypeOf((*MockUserAccount)(nil).GetEntryByUserId), arg0, arg1)
}

// GetFormula mocks base method.
func (m *MockUserAccount) GetFormula(arg0 context.Context, arg1 int64) (db.Formula, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormula", arg0, arg1)
	ret0, _ := ret[0].(db.Formula)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFormula indicates an expected call of GetFormula.
func (mr *MockUserAccountMockRecorder) GetFormula(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormula", reflect.TypeOf((*MockUserAccount)(nil).GetFormula), arg0, arg1)
}

// GetFormulaIngredient mocks base method.
func (m *MockUserAccount) GetFormulaIngredient(arg0 context.Context, arg1 int64) (db.FormulaIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormulaIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.FormulaIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFormulaIngredient indicates an expected call of GetFormulaIngredient.
func (mr *MockUserAccountMockRecorder) GetFormulaIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormulaIngredient", reflect.TypeOf((*MockUserAccount)(nil).GetFormulaIngredient), arg0, arg1)
}

// GetFullFormula mocks base method.
func (m *MockUserAccount) GetFullFormula(arg0 context.Context, arg1 int64) ([]db.GetFullFormulaRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullFormula", arg0, arg1)
	ret0, _ := ret[0].([]db.GetFullFormulaRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullFormula indicates an expected call of GetFullFormula.
func (mr *MockUserAccountMockRecorder) GetFullFormula(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullFormula", reflect.TypeOf((*MockUserAccount)(nil).GetFullFormula), arg0, arg1)
}

// GetIngredient mocks base method.
func (m *MockUserAccount) GetIngredient(arg0 context.Context, arg1 int64) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredient indicates an expected call of GetIngredient.
func (mr *MockUserAccountMockRecorder) GetIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredient", reflect.TypeOf((*MockUserAccount)(nil).GetIngredient), arg0, arg1)
}

// GetIngredientCount mocks base method.
func (m *MockUserAccount) GetIngredientCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientCount indicates an expected call of GetIngredientCount.
func (mr *MockUserAccountMockRecorder) GetIngredientCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientCount", reflect.TypeOf((*MockUserAccount)(nil).GetIngredientCount), arg0, arg1)
}

// GetIngredientFunction mocks base method.
func (m *MockUserAccount) GetIngredientFunction(arg0 context.Context, arg1 int64) (db.IngredientFunction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientFunction", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientFunction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientFunction indicates an expected call of GetIngredientFunction.
func (mr *MockUserAccountMockRecorder) GetIngredientFunction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientFunction", reflect.TypeOf((*MockUserAccount)(nil).GetIngredientFunction), arg0, arg1)
}

// GetIngredientTag mocks base method.
func (m *MockUserAccount) GetIngredientTag(arg0 context.Context, arg1 int64) (db.IngredientTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientTag", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientTag indicates an expected call of GetIngredientTag.
func (mr *MockUserAccountMockRecorder) GetIngredientTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientTag", reflect.TypeOf((*MockUserAccount)(nil).GetIngredientTag), arg0, arg1)
}

// GetIngredientTagByName mocks base method.
func (m *MockUserAccount) GetIngredientTagByName(arg0 context.Context, arg1 db.GetIngredientTagByNameParams) (db.IngredientTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientTagByName", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientTagByName indicates an expected call of GetIngredientTagByName.
func (mr *MockUserAccountMockRecorder) GetIngredientTagByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientTagByName", reflect.TypeOf((*MockUserAccount)(nil).GetIngredientTagByName), arg0, arg1)
}

// GetIngredientTagMapByIngredientId mocks base method.
func (m *MockUserAccount) GetIngredientTagMapByIngredientId(arg0 context.Context, arg1 int64) (db.IngredientTagMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientTagMapByIngredientId", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientTagMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientTagMapByIngredientId indicates an expected call of GetIngredientTagMapByIngredientId.
func (mr *MockUserAccountMockRecorder) GetIngredientTagMapByIngredientId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientTagMapByIngredientId", reflect.TypeOf((*MockUserAccount)(nil).GetIngredientTagMapByIngredientId), arg0, arg1)
}

// GetIngredientTagMapByIngredientTagId mocks base method.
func (m *MockUserAccount) GetIngredientTagMapByIngredientTagId(arg0 context.Context, arg1 int64) (db.IngredientTagMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredientTagMapByIngredientTagId", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientTagMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredientTagMapByIngredientTagId indicates an expected call of GetIngredientTagMapByIngredientTagId.
func (mr *MockUserAccountMockRecorder) GetIngredientTagMapByIngredientTagId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredientTagMapByIngredientTagId", reflect.TypeOf((*MockUserAccount)(nil).GetIngredientTagMapByIngredientTagId), arg0, arg1)
}

// GetInventoryItem mocks base method.
func (m *MockUserAccount) GetInventoryItem(arg0 context.Context, arg1 int64) (db.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(db.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryItem indicates an expected call of GetInventoryItem.
func (mr *MockUserAccountMockRecorder) GetInventoryItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryItem", reflect.TypeOf((*MockUserAccount)(nil).GetInventoryItem), arg0, arg1)
}

// GetLatestVersion mocks base method.
func (m *MockUserAccount) GetLatestVersion(arg0 context.Context) (db.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVersion", arg0)
	ret0, _ := ret[0].(db.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestVersion indicates an expected call of GetLatestVersion.
func (mr *MockUserAccountMockRecorder) GetLatestVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVersion", reflect.TypeOf((*MockUserAccount)(nil).GetLatestVersion), arg0)
}

// GetPhase mocks base method.
func (m *MockUserAccount) GetPhase(arg0 context.Context, arg1 int64) (db.Phase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhase", arg0, arg1)
	ret0, _ := ret[0].(db.Phase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhase indicates an expected call of GetPhase.
func (mr *MockUserAccountMockRecorder) GetPhase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhase", reflect.TypeOf((*MockUserAccount)(nil).GetPhase), arg0, arg1)
}

// GetPhasesNotInUpdate mocks base method.
func (m *MockUserAccount) GetPhasesNotInUpdate(arg0 context.Context, arg1 db.GetPhasesNotInUpdateParams) ([]db.Phase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhasesNotInUpdate", arg0, arg1)
	ret0, _ := ret[0].([]db.Phase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhasesNotInUpdate indicates an expected call of GetPhasesNotInUpdate.
func (mr *MockUserAccountMockRecorder) GetPhasesNotInUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhasesNotInUpdate", reflect.TypeOf((*MockUserAccount)(nil).GetPhasesNotInUpdate), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockUserAccount) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockUserAccountMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockUserAccount)(nil).GetSession), arg0, arg1)
}

// GetStripeByUserId mocks base method.
func (m *MockUserAccount) GetStripeByUserId(arg0 context.Context, arg1 int64) (db.Stripe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStripeByUserId", arg0, arg1)
	ret0, _ := ret[0].(db.Stripe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStripeByUserId indicates an expected call of GetStripeByUserId.
func (mr *MockUserAccountMockRecorder) GetStripeByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStripeByUserId", reflect.TypeOf((*MockUserAccount)(nil).GetStripeByUserId), arg0, arg1)
}

// GetStripePlanByUserAccess mocks base method.
func (m *MockUserAccount) GetStripePlanByUserAccess(arg0 context.Context, arg1 int32) (db.StripePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStripePlanByUserAccess", arg0, arg1)
	ret0, _ := ret[0].(db.StripePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStripePlanByUserAccess indicates an expected call of GetStripePlanByUserAccess.
func (mr *MockUserAccountMockRecorder) GetStripePlanByUserAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStripePlanByUserAccess", reflect.TypeOf((*MockUserAccount)(nil).GetStripePlanByUserAccess), arg0, arg1)
}

// GetTagMap mocks base method.
func (m *MockUserAccount) GetTagMap(arg0 context.Context, arg1 db.GetTagMapParams) (db.IngredientTagMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagMap", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientTagMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagMap indicates an expected call of GetTagMap.
func (mr *MockUserAccountMockRecorder) GetTagMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagMap", reflect.TypeOf((*MockUserAccount)(nil).GetTagMap), arg0, arg1)
}

// GetTesterByEmail mocks base method.
func (m *MockUserAccount) GetTesterByEmail(arg0 context.Context, arg1 string) (db.Tester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTesterByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Tester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTesterByEmail indicates an expected call of GetTesterByEmail.
func (mr *MockUserAccountMockRecorder) GetTesterByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTesterByEmail", reflect.TypeOf((*MockUserAccount)(nil).GetTesterByEmail), arg0, arg1)
}

// GetTransfer mocks base method.
func (m *MockUserAccount) GetTransfer(arg0 context.Context, arg1 int64) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockUserAccountMockRecorder) GetTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockUserAccount)(nil).GetTransfer), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserAccount) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserAccountMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserAccount)(nil).GetUser), arg0, arg1)
}

// GetUserByUserEmail mocks base method.
func (m *MockUserAccount) GetUserByUserEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserEmail indicates an expected call of GetUserByUserEmail.
func (mr *MockUserAccountMockRecorder) GetUserByUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserEmail", reflect.TypeOf((*MockUserAccount)(nil).GetUserByUserEmail), arg0, arg1)
}

// GetUserByUserName mocks base method.
func (m *MockUserAccount) GetUserByUserName(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserName", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserName indicates an expected call of GetUserByUserName.
func (mr *MockUserAccountMockRecorder) GetUserByUserName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserName", reflect.TypeOf((*MockUserAccount)(nil).GetUserByUserName), arg0, arg1)
}

// ListBatchItemsByUserId mocks base method.
func (m *MockUserAccount) ListBatchItemsByUserId(arg0 context.Context, arg1 int64) ([]db.BatchItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchItemsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.BatchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchItemsByUserId indicates an expected call of ListBatchItemsByUserId.
func (mr *MockUserAccountMockRecorder) ListBatchItemsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchItemsByUserId", reflect.TypeOf((*MockUserAccount)(nil).ListBatchItemsByUserId), arg0, arg1)
}

// ListBatchesByUserId mocks base method.
func (m *MockUserAccount) ListBatchesByUserId(arg0 context.Context, arg1 db.ListBatchesByUserIdParams) ([]db.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchesByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchesByUserId indicates an expected call of ListBatchesByUserId.
func (mr *MockUserAccountMockRecorder) ListBatchesByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchesByUserId", reflect.TypeOf((*MockUserAccount)(nil).ListBatchesByUserId), arg0, arg1)
}

// ListCurrencies mocks base method.
func (m *MockUserAccount) ListCurrencies(arg0 context.Context, arg1 db.ListCurrenciesParams) ([]db.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrencies", arg0, arg1)
	ret0, _ := ret[0].([]db.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrencies indicates an expected call of ListCurrencies.
func (mr *MockUserAccountMockRecorder) ListCurrencies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrencies", reflect.TypeOf((*MockUserAccount)(nil).ListCurrencies), arg0, arg1)
}

// ListFormulaIngredientsByPhaseId mocks base method.
func (m *MockUserAccount) ListFormulaIngredientsByPhaseId(arg0 context.Context, arg1 int64) ([]db.FormulaIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFormulaIngredientsByPhaseId", arg0, arg1)
	ret0, _ := ret[0].([]db.FormulaIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFormulaIngredientsByPhaseId indicates an expected call of ListFormulaIngredientsByPhaseId.
func (mr *MockUserAccountMockRecorder) ListFormulaIngredientsByPhaseId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFormulaIngredientsByPhaseId", reflect.TypeOf((*MockUserAccount)(nil).ListFormulaIngredientsByPhaseId), arg0, arg1)
}

// ListFormulasByUserId mocks base method.
func (m *MockUserAccount) ListFormulasByUserId(arg0 context.Context, arg1 db.ListFormulasByUserIdParams) ([]db.Formula, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFormulasByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.Formula)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFormulasByUserId indicates an expected call of ListFormulasByUserId.
func (mr *MockUserAccountMockRecorder) ListFormulasByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFormulasByUserId", reflect.TypeOf((*MockUserAccount)(nil).ListFormulasByUserId), arg0, arg1)
}

// ListIngredientFunctionsByUserId mocks base method.
func (m *MockUserAccount) ListIngredientFunctionsByUserId(arg0 context.Context, arg1 db.ListIngredientFunctionsByUserIdParams) ([]db.IngredientFunction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngredientFunctionsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.IngredientFunction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngredientFunctionsByUserId indicates an expected call of ListIngredientFunctionsByUserId.
func (mr *MockUserAccountMockRecorder) ListIngredientFunctionsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngredientFunctionsByUserId", reflect.TypeOf((*MockUserAccount)(nil).ListIngredientFunctionsByUserId), arg0, arg1)
}

// ListIngredientTags mocks base method.
func (m *MockUserAccount) ListIngredientTags(arg0 context.Context, arg1 int64) ([]db.IngredientTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngredientTags", arg0, arg1)
	ret0, _ := ret[0].([]db.IngredientTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngredientTags indicates an expected call of ListIngredientTags.
func (mr *MockUserAccountMockRecorder) ListIngredientTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngredientTags", reflect.TypeOf((*MockUserAccount)(nil).ListIngredientTags), arg0, arg1)
}

// ListIngredientTagsByIngredientId mocks base method.
func (m *MockUserAccount) ListIngredientTagsByIngredientId(arg0 context.Context, arg1 int64) ([]db.ListIngredientTagsByIngredientIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngredientTagsByIngredientId", arg0, arg1)
	ret0, _ := ret[0].([]db.ListIngredientTagsByIngredientIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngredientTagsByIngredientId indicates an expected call of ListIngredientTagsByIngredientId.
func (mr *MockUserAccountMockRecorder) ListIngredientTagsByIngredientId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngredientTagsByIngredientId", reflect.TypeOf((*MockUserAccount)(nil).ListIngredientTagsByIngredientId), arg0, arg1)
}

// ListIngredients mocks base method.
func (m *MockUserAccount) ListIngredients(arg0 context.Context, arg1 db.ListIngredientsParams) ([]db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngredients", arg0, arg1)
	ret0, _ := ret[0].([]db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngredients indicates an expected call of ListIngredients.
func (mr *MockUserAccountMockRecorder) ListIngredients(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngredients", reflect.TypeOf((*MockUserAccount)(nil).ListIngredients), arg0, arg1)
}

// ListIngredientsByUserId mocks base method.
func (m *MockUserAccount) ListIngredientsByUserId(arg0 context.Context, arg1 db.ListIngredientsByUserIdParams) ([]db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngredientsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngredientsByUserId indicates an expected call of ListIngredientsByUserId.
func (mr *MockUserAccountMockRecorder) ListIngredientsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngredientsByUserId", reflect.TypeOf((*MockUserAccount)(nil).ListIngredientsByUserId), arg0, arg1)
}

// ListInventoryItemsByUserId mocks base method.
func (m *MockUserAccount) ListInventoryItemsByUserId(arg0 context.Context, arg1 db.ListInventoryItemsByUserIdParams) ([]db.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInventoryItemsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInventoryItemsByUserId indicates an expected call of ListInventoryItemsByUserId.
func (mr *MockUserAccountMockRecorder) ListInventoryItemsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInventoryItemsByUserId", reflect.TypeOf((*MockUserAccount)(nil).ListInventoryItemsByUserId), arg0, arg1)
}

// ListPhasesByFormulaId mocks base method.
func (m *MockUserAccount) ListPhasesByFormulaId(arg0 context.Context, arg1 int64) ([]db.Phase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhasesByFormulaId", arg0, arg1)
	ret0, _ := ret[0].([]db.Phase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhasesByFormulaId indicates an expected call of ListPhasesByFormulaId.
func (mr *MockUserAccountMockRecorder) ListPhasesByFormulaId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhasesByFormulaId", reflect.TypeOf((*MockUserAccount)(nil).ListPhasesByFormulaId), arg0, arg1)
}

// ListStripePlans mocks base method.
func (m *MockUserAccount) ListStripePlans(arg0 context.Context, arg1 db.ListStripePlansParams) ([]db.StripePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStripePlans", arg0, arg1)
	ret0, _ := ret[0].([]db.StripePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStripePlans indicates an expected call of ListStripePlans.
func (mr *MockUserAccountMockRecorder) ListStripePlans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStripePlans", reflect.TypeOf((*MockUserAccount)(nil).ListStripePlans), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockUserAccount) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserAccountMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserAccount)(nil).ListUsers), arg0, arg1)
}

// UpdateBatch mocks base method.
func (m *MockUserAccount) UpdateBatch(arg0 context.Context, arg1 db.UpdateBatchParams) (db.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", arg0, arg1)
	ret0, _ := ret[0].(db.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockUserAccountMockRecorder) UpdateBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockUserAccount)(nil).UpdateBatch), arg0, arg1)
}

// UpdateBatchItem mocks base method.
func (m *MockUserAccount) UpdateBatchItem(arg0 context.Context, arg1 db.UpdateBatchItemParams) (db.BatchItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatchItem", arg0, arg1)
	ret0, _ := ret[0].(db.BatchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatchItem indicates an expected call of UpdateBatchItem.
func (mr *MockUserAccountMockRecorder) UpdateBatchItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatchItem", reflect.TypeOf((*MockUserAccount)(nil).UpdateBatchItem), arg0, arg1)
}

// UpdateCurrency mocks base method.
func (m *MockUserAccount) UpdateCurrency(arg0 context.Context, arg1 int64) (db.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrency", arg0, arg1)
	ret0, _ := ret[0].(db.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrency indicates an expected call of UpdateCurrency.
func (mr *MockUserAccountMockRecorder) UpdateCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrency", reflect.TypeOf((*MockUserAccount)(nil).UpdateCurrency), arg0, arg1)
}

// UpdateFormula mocks base method.
func (m *MockUserAccount) UpdateFormula(arg0 context.Context, arg1 db.UpdateFormulaParams) (db.Formula, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFormula", arg0, arg1)
	ret0, _ := ret[0].(db.Formula)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFormula indicates an expected call of UpdateFormula.
func (mr *MockUserAccountMockRecorder) UpdateFormula(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFormula", reflect.TypeOf((*MockUserAccount)(nil).UpdateFormula), arg0, arg1)
}

// UpdateFormulaIngredient mocks base method.
func (m *MockUserAccount) UpdateFormulaIngredient(arg0 context.Context, arg1 db.UpdateFormulaIngredientParams) (db.FormulaIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFormulaIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.FormulaIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFormulaIngredient indicates an expected call of UpdateFormulaIngredient.
func (mr *MockUserAccountMockRecorder) UpdateFormulaIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFormulaIngredient", reflect.TypeOf((*MockUserAccount)(nil).UpdateFormulaIngredient), arg0, arg1)
}

// UpdateFullFormulaTx mocks base method.
func (m *MockUserAccount) UpdateFullFormulaTx(arg0 context.Context, arg1 db.UpdateFullFormulaParams) (db.UpdateFormulaTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFullFormulaTx", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateFormulaTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFullFormulaTx indicates an expected call of UpdateFullFormulaTx.
func (mr *MockUserAccountMockRecorder) UpdateFullFormulaTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFullFormulaTx", reflect.TypeOf((*MockUserAccount)(nil).UpdateFullFormulaTx), arg0, arg1)
}

// UpdateIngredient mocks base method.
func (m *MockUserAccount) UpdateIngredient(arg0 context.Context, arg1 db.UpdateIngredientParams) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngredient indicates an expected call of UpdateIngredient.
func (mr *MockUserAccountMockRecorder) UpdateIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredient", reflect.TypeOf((*MockUserAccount)(nil).UpdateIngredient), arg0, arg1)
}

// UpdateIngredientFunction mocks base method.
func (m *MockUserAccount) UpdateIngredientFunction(arg0 context.Context, arg1 db.UpdateIngredientFunctionParams) (db.IngredientFunction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredientFunction", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientFunction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngredientFunction indicates an expected call of UpdateIngredientFunction.
func (mr *MockUserAccountMockRecorder) UpdateIngredientFunction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredientFunction", reflect.TypeOf((*MockUserAccount)(nil).UpdateIngredientFunction), arg0, arg1)
}

// UpdateIngredientTag mocks base method.
func (m *MockUserAccount) UpdateIngredientTag(arg0 context.Context, arg1 int64) (db.IngredientTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredientTag", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngredientTag indicates an expected call of UpdateIngredientTag.
func (mr *MockUserAccountMockRecorder) UpdateIngredientTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredientTag", reflect.TypeOf((*MockUserAccount)(nil).UpdateIngredientTag), arg0, arg1)
}

// UpdateIngredientTagMap mocks base method.
func (m *MockUserAccount) UpdateIngredientTagMap(arg0 context.Context, arg1 db.UpdateIngredientTagMapParams) (db.IngredientTagMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredientTagMap", arg0, arg1)
	ret0, _ := ret[0].(db.IngredientTagMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngredientTagMap indicates an expected call of UpdateIngredientTagMap.
func (mr *MockUserAccountMockRecorder) UpdateIngredientTagMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredientTagMap", reflect.TypeOf((*MockUserAccount)(nil).UpdateIngredientTagMap), arg0, arg1)
}

// UpdateInventoryItem mocks base method.
func (m *MockUserAccount) UpdateInventoryItem(arg0 context.Context, arg1 db.UpdateInventoryItemParams) (db.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(db.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInventoryItem indicates an expected call of UpdateInventoryItem.
func (mr *MockUserAccountMockRecorder) UpdateInventoryItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventoryItem", reflect.TypeOf((*MockUserAccount)(nil).UpdateInventoryItem), arg0, arg1)
}

// UpdatePhase mocks base method.
func (m *MockUserAccount) UpdatePhase(arg0 context.Context, arg1 db.UpdatePhaseParams) (db.Phase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhase", arg0, arg1)
	ret0, _ := ret[0].(db.Phase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhase indicates an expected call of UpdatePhase.
func (mr *MockUserAccountMockRecorder) UpdatePhase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhase", reflect.TypeOf((*MockUserAccount)(nil).UpdatePhase), arg0, arg1)
}

// UpdateStripeByUserId mocks base method.
func (m *MockUserAccount) UpdateStripeByUserId(arg0 context.Context, arg1 db.UpdateStripeByUserIdParams) (db.Stripe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStripeByUserId", arg0, arg1)
	ret0, _ := ret[0].(db.Stripe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStripeByUserId indicates an expected call of UpdateStripeByUserId.
func (mr *MockUserAccountMockRecorder) UpdateStripeByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStripeByUserId", reflect.TypeOf((*MockUserAccount)(nil).UpdateStripeByUserId), arg0, arg1)
}

// UpdateTester mocks base method.
func (m *MockUserAccount) UpdateTester(arg0 context.Context, arg1 db.UpdateTesterParams) (db.Tester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTester", arg0, arg1)
	ret0, _ := ret[0].(db.Tester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTester indicates an expected call of UpdateTester.
func (mr *MockUserAccountMockRecorder) UpdateTester(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTester", reflect.TypeOf((*MockUserAccount)(nil).UpdateTester), arg0, arg1)
}

// UpdateUserHash mocks base method.
func (m *MockUserAccount) UpdateUserHash(arg0 context.Context, arg1 db.UpdateUserHashParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHash", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHash indicates an expected call of UpdateUserHash.
func (mr *MockUserAccountMockRecorder) UpdateUserHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHash", reflect.TypeOf((*MockUserAccount)(nil).UpdateUserHash), arg0, arg1)
}

// UpdateUserName mocks base method.
func (m *MockUserAccount) UpdateUserName(arg0 context.Context, arg1 db.UpdateUserNameParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserName", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserName indicates an expected call of UpdateUserName.
func (mr *MockUserAccountMockRecorder) UpdateUserName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserName", reflect.TypeOf((*MockUserAccount)(nil).UpdateUserName), arg0, arg1)
}
