// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: entry.sql

package db

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
                     user_id,
                     amount
) VALUES (
          $1, $2
         ) RETURNING id, user_id, amount, created_at
`

type CreateEntryParams struct {
	UserID sql.NullInt64 `json:"userID"`
	Amount sql.NullInt64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.UserID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntryByUserId = `-- name: GetEntryByUserId :one
SELECT id, user_id, amount, created_at FROM entries
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetEntryByUserId(ctx context.Context, userID sql.NullInt64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryByUserId, userID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
