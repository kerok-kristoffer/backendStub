// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: inventory_item.sql

package db

import (
	"context"
	"time"
)

const createInventoryItem = `-- name: CreateInventoryItem :one
INSERT INTO inventory_items (
                            user_id,
                            ingredient_id,
                            amount_in_grams,
                            cost_per_gram,
                            currency_id,
                            expiry_date
) VALUES (
             $1, $2, $3, $4, $5, $6
         ) RETURNING id, user_id, ingredient_id, amount_in_grams, cost_per_gram, currency_id, expiry_date, created_at, updated_at
`

type CreateInventoryItemParams struct {
	UserID        int64     `json:"userID"`
	IngredientID  int64     `json:"ingredientID"`
	AmountInGrams int32     `json:"amountInGrams"`
	CostPerGram   float32   `json:"costPerGram"`
	CurrencyID    int64     `json:"currencyID"`
	ExpiryDate    time.Time `json:"expiryDate"`
}

func (q *Queries) CreateInventoryItem(ctx context.Context, arg CreateInventoryItemParams) (InventoryItem, error) {
	row := q.db.QueryRowContext(ctx, createInventoryItem,
		arg.UserID,
		arg.IngredientID,
		arg.AmountInGrams,
		arg.CostPerGram,
		arg.CurrencyID,
		arg.ExpiryDate,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IngredientID,
		&i.AmountInGrams,
		&i.CostPerGram,
		&i.CurrencyID,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInventoryItem = `-- name: DeleteInventoryItem :exec
DELETE FROM inventory_items
WHERE id = $1
`

func (q *Queries) DeleteInventoryItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInventoryItem, id)
	return err
}

const getInventoryItem = `-- name: GetInventoryItem :one
SELECT id, user_id, ingredient_id, amount_in_grams, cost_per_gram, currency_id, expiry_date, created_at, updated_at FROM inventory_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInventoryItem(ctx context.Context, id int64) (InventoryItem, error) {
	row := q.db.QueryRowContext(ctx, getInventoryItem, id)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IngredientID,
		&i.AmountInGrams,
		&i.CostPerGram,
		&i.CurrencyID,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listInventoryItemsByUserId = `-- name: ListInventoryItemsByUserId :many
SELECT id, user_id, ingredient_id, amount_in_grams, cost_per_gram, currency_id, expiry_date, created_at, updated_at FROM inventory_items
WHERE user_id = $1
ORDER BY id
LIMIT $2
    OFFSET $3
`

type ListInventoryItemsByUserIdParams struct {
	UserID int64 `json:"userID"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInventoryItemsByUserId(ctx context.Context, arg ListInventoryItemsByUserIdParams) ([]InventoryItem, error) {
	rows, err := q.db.QueryContext(ctx, listInventoryItemsByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InventoryItem{}
	for rows.Next() {
		var i InventoryItem
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.IngredientID,
			&i.AmountInGrams,
			&i.CostPerGram,
			&i.CurrencyID,
			&i.ExpiryDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInventoryItem = `-- name: UpdateInventoryItem :one
UPDATE inventory_items
SET (user_id,
     ingredient_id,
     amount_in_grams,
     cost_per_gram,
     currency_id,
     expiry_date) =
        ($2, $3, $4, $5, $6, $7)
WHERE id = $1
RETURNING id, user_id, ingredient_id, amount_in_grams, cost_per_gram, currency_id, expiry_date, created_at, updated_at
`

type UpdateInventoryItemParams struct {
	ID            int64     `json:"id"`
	UserID        int64     `json:"userID"`
	IngredientID  int64     `json:"ingredientID"`
	AmountInGrams int32     `json:"amountInGrams"`
	CostPerGram   float32   `json:"costPerGram"`
	CurrencyID    int64     `json:"currencyID"`
	ExpiryDate    time.Time `json:"expiryDate"`
}

func (q *Queries) UpdateInventoryItem(ctx context.Context, arg UpdateInventoryItemParams) (InventoryItem, error) {
	row := q.db.QueryRowContext(ctx, updateInventoryItem,
		arg.ID,
		arg.UserID,
		arg.IngredientID,
		arg.AmountInGrams,
		arg.CostPerGram,
		arg.CurrencyID,
		arg.ExpiryDate,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IngredientID,
		&i.AmountInGrams,
		&i.CostPerGram,
		&i.CurrencyID,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
