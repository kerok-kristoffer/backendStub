// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: ingredient_tag_map.sql

package db

import (
	"context"
)

const createIngredientTagMap = `-- name: CreateIngredientTagMap :one
INSERT INTO ingredient_tag_maps (
    ingredient_tag_id, ingredient_id
) VALUES ($1, $2) RETURNING id, ingredient_tag_id, ingredient_id
`

type CreateIngredientTagMapParams struct {
	IngredientTagID int64 `json:"ingredientTagID"`
	IngredientID    int64 `json:"ingredientID"`
}

func (q *Queries) CreateIngredientTagMap(ctx context.Context, arg CreateIngredientTagMapParams) (IngredientTagMap, error) {
	row := q.db.QueryRowContext(ctx, createIngredientTagMap, arg.IngredientTagID, arg.IngredientID)
	var i IngredientTagMap
	err := row.Scan(&i.ID, &i.IngredientTagID, &i.IngredientID)
	return i, err
}

const deleteIngredientTagMap = `-- name: DeleteIngredientTagMap :exec
DELETE FROM ingredient_tag_maps
WHERE id = $1
`

func (q *Queries) DeleteIngredientTagMap(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredientTagMap, id)
	return err
}

const deleteIngredientTagMapByIngredientId = `-- name: DeleteIngredientTagMapByIngredientId :exec
DELETE FROM ingredient_tag_maps
WHERE ingredient_id = $1
`

func (q *Queries) DeleteIngredientTagMapByIngredientId(ctx context.Context, ingredientID int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredientTagMapByIngredientId, ingredientID)
	return err
}

const getIngredientTagMapByIngredientId = `-- name: GetIngredientTagMapByIngredientId :one
SELECT id, ingredient_tag_id, ingredient_id FROM ingredient_tag_maps
WHERE ingredient_id = $1 LIMIT 1
`

func (q *Queries) GetIngredientTagMapByIngredientId(ctx context.Context, ingredientID int64) (IngredientTagMap, error) {
	row := q.db.QueryRowContext(ctx, getIngredientTagMapByIngredientId, ingredientID)
	var i IngredientTagMap
	err := row.Scan(&i.ID, &i.IngredientTagID, &i.IngredientID)
	return i, err
}

const getIngredientTagMapByIngredientTagId = `-- name: GetIngredientTagMapByIngredientTagId :one
SELECT id, ingredient_tag_id, ingredient_id FROM ingredient_tag_maps
WHERE ingredient_tag_id = $1 LIMIT 1
`

func (q *Queries) GetIngredientTagMapByIngredientTagId(ctx context.Context, ingredientTagID int64) (IngredientTagMap, error) {
	row := q.db.QueryRowContext(ctx, getIngredientTagMapByIngredientTagId, ingredientTagID)
	var i IngredientTagMap
	err := row.Scan(&i.ID, &i.IngredientTagID, &i.IngredientID)
	return i, err
}

const getTagMap = `-- name: GetTagMap :one
SELECT id, ingredient_tag_id, ingredient_id FROM ingredient_tag_maps
WHERE ingredient_id = $1 AND ingredient_tag_id = $2
LIMIT 1
`

type GetTagMapParams struct {
	IngredientID    int64 `json:"ingredientID"`
	IngredientTagID int64 `json:"ingredientTagID"`
}

func (q *Queries) GetTagMap(ctx context.Context, arg GetTagMapParams) (IngredientTagMap, error) {
	row := q.db.QueryRowContext(ctx, getTagMap, arg.IngredientID, arg.IngredientTagID)
	var i IngredientTagMap
	err := row.Scan(&i.ID, &i.IngredientTagID, &i.IngredientID)
	return i, err
}

const updateIngredientTagMap = `-- name: UpdateIngredientTagMap :one
UPDATE ingredient_tag_maps
SET (ingredient_id, ingredient_tag_id) =
        ($2, $3)
WHERE id = $1
RETURNING id, ingredient_tag_id, ingredient_id
`

type UpdateIngredientTagMapParams struct {
	ID              int64 `json:"id"`
	IngredientID    int64 `json:"ingredientID"`
	IngredientTagID int64 `json:"ingredientTagID"`
}

func (q *Queries) UpdateIngredientTagMap(ctx context.Context, arg UpdateIngredientTagMapParams) (IngredientTagMap, error) {
	row := q.db.QueryRowContext(ctx, updateIngredientTagMap, arg.ID, arg.IngredientID, arg.IngredientTagID)
	var i IngredientTagMap
	err := row.Scan(&i.ID, &i.IngredientTagID, &i.IngredientID)
	return i, err
}
