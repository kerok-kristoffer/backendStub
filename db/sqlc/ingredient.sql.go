// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: ingredient.sql

package db

import (
	"context"
	"database/sql"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (
                        name,
                        inci,
                        hash,
                        cost,
                        user_id,
                        function_id
) VALUES (
          $1, $2, $3, $4, $5, $6
         ) RETURNING id, name, inci, hash, user_id, function_id, cost, created_at, updated_at
`

type CreateIngredientParams struct {
	Name       string          `json:"name"`
	Inci       string          `json:"inci"`
	Hash       string          `json:"hash"`
	Cost       sql.NullFloat64 `json:"cost"`
	UserID     int64           `json:"userID"`
	FunctionID sql.NullInt64   `json:"functionID"`
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient,
		arg.Name,
		arg.Inci,
		arg.Hash,
		arg.Cost,
		arg.UserID,
		arg.FunctionID,
	)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Inci,
		&i.Hash,
		&i.UserID,
		&i.FunctionID,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients
WHERE id = $1
`

func (q *Queries) DeleteIngredient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredient, id)
	return err
}

const deleteIngredientsByUserId = `-- name: DeleteIngredientsByUserId :exec
DELETE FROM ingredients
WHERE user_id = $1
`

func (q *Queries) DeleteIngredientsByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredientsByUserId, userID)
	return err
}

const getIngredient = `-- name: GetIngredient :one
SELECT id, name, inci, hash, user_id, function_id, cost, created_at, updated_at FROM ingredients
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIngredient(ctx context.Context, id int64) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Inci,
		&i.Hash,
		&i.UserID,
		&i.FunctionID,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIngredientCount = `-- name: GetIngredientCount :one
SELECT COUNT(*) FROM ingredients
WHERE user_id = $1
`

func (q *Queries) GetIngredientCount(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getIngredientCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listIngredients = `-- name: ListIngredients :many
SELECT id, name, inci, hash, user_id, function_id, cost, created_at, updated_at FROM ingredients
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListIngredientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListIngredients(ctx context.Context, arg ListIngredientsParams) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, listIngredients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ingredient{}
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Inci,
			&i.Hash,
			&i.UserID,
			&i.FunctionID,
			&i.Cost,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIngredientsByUserId = `-- name: ListIngredientsByUserId :many
SELECT id, name, inci, hash, user_id, function_id, cost, created_at, updated_at FROM ingredients
    WHERE user_id = $1
    ORDER BY name
    LIMIT $2
    OFFSET $3
`

type ListIngredientsByUserIdParams struct {
	UserID int64 `json:"userID"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListIngredientsByUserId(ctx context.Context, arg ListIngredientsByUserIdParams) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, listIngredientsByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ingredient{}
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Inci,
			&i.Hash,
			&i.UserID,
			&i.FunctionID,
			&i.Cost,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngredient = `-- name: UpdateIngredient :one
UPDATE ingredients
SET (name,
     inci,
     hash,
     cost,
     user_id,
     function_id,
     updated_at
    ) = (
                 $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP)
WHERE id = $1
RETURNING id, name, inci, hash, user_id, function_id, cost, created_at, updated_at
`

type UpdateIngredientParams struct {
	ID         int64           `json:"id"`
	Name       string          `json:"name"`
	Inci       string          `json:"inci"`
	Hash       string          `json:"hash"`
	Cost       sql.NullFloat64 `json:"cost"`
	UserID     int64           `json:"userID"`
	FunctionID sql.NullInt64   `json:"functionID"`
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, updateIngredient,
		arg.ID,
		arg.Name,
		arg.Inci,
		arg.Hash,
		arg.Cost,
		arg.UserID,
		arg.FunctionID,
	)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Inci,
		&i.Hash,
		&i.UserID,
		&i.FunctionID,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
