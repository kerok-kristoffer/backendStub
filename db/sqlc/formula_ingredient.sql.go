// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: formula_ingredient.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFormulaIngredient = `-- name: CreateFormulaIngredient :one
INSERT INTO formula_ingredients (
                                ingredient_id,
                                percentage,
                                phase_id,
                                cost,
                                description,
                                update_id
) VALUES (
          $1, $2, $3, $4, $5, $6
         ) RETURNING id, ingredient_id, percentage, description, phase_id, cost, update_id, created_at, updated_at
`

type CreateFormulaIngredientParams struct {
	IngredientID int64           `json:"ingredientID"`
	Percentage   float32         `json:"percentage"`
	PhaseID      int64           `json:"phaseID"`
	Cost         sql.NullFloat64 `json:"cost"`
	Description  sql.NullString  `json:"description"`
	UpdateID     uuid.UUID       `json:"updateID"`
}

func (q *Queries) CreateFormulaIngredient(ctx context.Context, arg CreateFormulaIngredientParams) (FormulaIngredient, error) {
	row := q.db.QueryRowContext(ctx, createFormulaIngredient,
		arg.IngredientID,
		arg.Percentage,
		arg.PhaseID,
		arg.Cost,
		arg.Description,
		arg.UpdateID,
	)
	var i FormulaIngredient
	err := row.Scan(
		&i.ID,
		&i.IngredientID,
		&i.Percentage,
		&i.Description,
		&i.PhaseID,
		&i.Cost,
		&i.UpdateID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFormulaIngredient = `-- name: DeleteFormulaIngredient :exec
DELETE FROM formula_ingredients
WHERE id = $1
`

func (q *Queries) DeleteFormulaIngredient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFormulaIngredient, id)
	return err
}

const deleteFormulaIngredientsNotInUpdate = `-- name: DeleteFormulaIngredientsNotInUpdate :exec
DELETE FROM formula_ingredients
WHERE phase_id IN ($1)
AND update_id NOT IN ($2)
`

type DeleteFormulaIngredientsNotInUpdateParams struct {
	PhaseID  int64     `json:"phaseID"`
	UpdateID uuid.UUID `json:"updateID"`
}

func (q *Queries) DeleteFormulaIngredientsNotInUpdate(ctx context.Context, arg DeleteFormulaIngredientsNotInUpdateParams) error {
	_, err := q.db.ExecContext(ctx, deleteFormulaIngredientsNotInUpdate, arg.PhaseID, arg.UpdateID)
	return err
}

const getFormulaIngredient = `-- name: GetFormulaIngredient :one
SELECT id, ingredient_id, percentage, description, phase_id, cost, update_id, created_at, updated_at FROM formula_ingredients
    WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFormulaIngredient(ctx context.Context, id int64) (FormulaIngredient, error) {
	row := q.db.QueryRowContext(ctx, getFormulaIngredient, id)
	var i FormulaIngredient
	err := row.Scan(
		&i.ID,
		&i.IngredientID,
		&i.Percentage,
		&i.Description,
		&i.PhaseID,
		&i.Cost,
		&i.UpdateID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFormulaIngredientsByPhaseId = `-- name: ListFormulaIngredientsByPhaseId :many
SELECT id, ingredient_id, percentage, description, phase_id, cost, update_id, created_at, updated_at FROM formula_ingredients
    WHERE phase_id = $1
    ORDER BY id
`

func (q *Queries) ListFormulaIngredientsByPhaseId(ctx context.Context, phaseID int64) ([]FormulaIngredient, error) {
	rows, err := q.db.QueryContext(ctx, listFormulaIngredientsByPhaseId, phaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FormulaIngredient{}
	for rows.Next() {
		var i FormulaIngredient
		if err := rows.Scan(
			&i.ID,
			&i.IngredientID,
			&i.Percentage,
			&i.Description,
			&i.PhaseID,
			&i.Cost,
			&i.UpdateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFormulaIngredient = `-- name: UpdateFormulaIngredient :one
UPDATE formula_ingredients
SET (ingredient_id,
     percentage,
     phase_id,
     cost,
     description,
     update_id,
     updated_at) =
        ($2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP)
WHERE id = $1
RETURNING id, ingredient_id, percentage, description, phase_id, cost, update_id, created_at, updated_at
`

type UpdateFormulaIngredientParams struct {
	ID           int64           `json:"id"`
	IngredientID int64           `json:"ingredientID"`
	Percentage   float32         `json:"percentage"`
	PhaseID      int64           `json:"phaseID"`
	Cost         sql.NullFloat64 `json:"cost"`
	Description  sql.NullString  `json:"description"`
	UpdateID     uuid.UUID       `json:"updateID"`
}

func (q *Queries) UpdateFormulaIngredient(ctx context.Context, arg UpdateFormulaIngredientParams) (FormulaIngredient, error) {
	row := q.db.QueryRowContext(ctx, updateFormulaIngredient,
		arg.ID,
		arg.IngredientID,
		arg.Percentage,
		arg.PhaseID,
		arg.Cost,
		arg.Description,
		arg.UpdateID,
	)
	var i FormulaIngredient
	err := row.Scan(
		&i.ID,
		&i.IngredientID,
		&i.Percentage,
		&i.Description,
		&i.PhaseID,
		&i.Cost,
		&i.UpdateID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
