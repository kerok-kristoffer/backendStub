// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: tester.sql

package db

import (
	"context"
	"database/sql"
)

const createTester = `-- name: CreateTester :one
INSERT INTO testers (
    email
) VALUES (
             $1
         ) RETURNING id, user_id, email, created_at, updated_at
`

func (q *Queries) CreateTester(ctx context.Context, email string) (Tester, error) {
	row := q.db.QueryRowContext(ctx, createTester, email)
	var i Tester
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTesterByEmail = `-- name: GetTesterByEmail :one
SELECT id, user_id, email, created_at, updated_at FROM testers
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetTesterByEmail(ctx context.Context, email string) (Tester, error) {
	row := q.db.QueryRowContext(ctx, getTesterByEmail, email)
	var i Tester
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTester = `-- name: UpdateTester :one
UPDATE testers
SET (
     email,
     user_id,
     updated_at) =
        ($2, $3, CURRENT_TIMESTAMP)
WHERE id = $1
RETURNING id, user_id, email, created_at, updated_at
`

type UpdateTesterParams struct {
	ID     int64         `json:"id"`
	Email  string        `json:"email"`
	UserID sql.NullInt64 `json:"userID"`
}

func (q *Queries) UpdateTester(ctx context.Context, arg UpdateTesterParams) (Tester, error) {
	row := q.db.QueryRowContext(ctx, updateTester, arg.ID, arg.Email, arg.UserID)
	var i Tester
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
