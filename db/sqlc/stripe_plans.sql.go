// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: stripe_plans.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createStripePlan = `-- name: CreateStripePlan :one
INSERT INTO stripe_plans (
                          id,
                          name,
                          user_access_id
) VALUES (
          $1, $2, $3
         ) RETURNING id, name, user_access_id, created_at, updated_at
`

type CreateStripePlanParams struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	UserAccessID int32     `json:"userAccessID"`
}

func (q *Queries) CreateStripePlan(ctx context.Context, arg CreateStripePlanParams) (StripePlan, error) {
	row := q.db.QueryRowContext(ctx, createStripePlan, arg.ID, arg.Name, arg.UserAccessID)
	var i StripePlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserAccessID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStripePlanByUserAccess = `-- name: GetStripePlanByUserAccess :one
SELECT id, name, user_access_id, created_at, updated_at FROM stripe_plans
WHERE user_access_id = $1
LIMIT 1
`

func (q *Queries) GetStripePlanByUserAccess(ctx context.Context, userAccessID int32) (StripePlan, error) {
	row := q.db.QueryRowContext(ctx, getStripePlanByUserAccess, userAccessID)
	var i StripePlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserAccessID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStripePlans = `-- name: ListStripePlans :many
SELECT id, name, user_access_id, created_at, updated_at FROM stripe_plans
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListStripePlansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStripePlans(ctx context.Context, arg ListStripePlansParams) ([]StripePlan, error) {
	rows, err := q.db.QueryContext(ctx, listStripePlans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StripePlan{}
	for rows.Next() {
		var i StripePlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserAccessID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
