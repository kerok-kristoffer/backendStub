// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: batch.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBatch = `-- name: CreateBatch :one
INSERT INTO batches (
                     user_id,
                     name,
                     description,
                     production_date,
                     expiry_date
) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING id, user_id, name, description, production_date, expiry_date, created_at, updated_at
`

type CreateBatchParams struct {
	UserID         int64          `json:"userID"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	ProductionDate sql.NullTime   `json:"productionDate"`
	ExpiryDate     time.Time      `json:"expiryDate"`
}

func (q *Queries) CreateBatch(ctx context.Context, arg CreateBatchParams) (Batch, error) {
	row := q.db.QueryRowContext(ctx, createBatch,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.ProductionDate,
		arg.ExpiryDate,
	)
	var i Batch
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ProductionDate,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBatch = `-- name: DeleteBatch :exec
DELETE FROM batches
WHERE id = $1
`

func (q *Queries) DeleteBatch(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBatch, id)
	return err
}

const getBatch = `-- name: GetBatch :one
SELECT id, user_id, name, description, production_date, expiry_date, created_at, updated_at FROM batches
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBatch(ctx context.Context, id int64) (Batch, error) {
	row := q.db.QueryRowContext(ctx, getBatch, id)
	var i Batch
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ProductionDate,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBatchesByUserId = `-- name: ListBatchesByUserId :many
SELECT id, user_id, name, description, production_date, expiry_date, created_at, updated_at FROM batches
WHERE user_id = $1
ORDER BY id
LIMIT $2
    OFFSET $3
`

type ListBatchesByUserIdParams struct {
	UserID int64 `json:"userID"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBatchesByUserId(ctx context.Context, arg ListBatchesByUserIdParams) ([]Batch, error) {
	rows, err := q.db.QueryContext(ctx, listBatchesByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Batch{}
	for rows.Next() {
		var i Batch
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.ProductionDate,
			&i.ExpiryDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBatch = `-- name: UpdateBatch :one
UPDATE batches
SET (user_id,
     name,
     description,
     production_date,
     expiry_date) =
        ($2, $3, $4, $5, $6)
WHERE id = $1
RETURNING id, user_id, name, description, production_date, expiry_date, created_at, updated_at
`

type UpdateBatchParams struct {
	ID             int64          `json:"id"`
	UserID         int64          `json:"userID"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	ProductionDate sql.NullTime   `json:"productionDate"`
	ExpiryDate     time.Time      `json:"expiryDate"`
}

func (q *Queries) UpdateBatch(ctx context.Context, arg UpdateBatchParams) (Batch, error) {
	row := q.db.QueryRowContext(ctx, updateBatch,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.ProductionDate,
		arg.ExpiryDate,
	)
	var i Batch
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ProductionDate,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
