// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: batch_item.sql

package db

import (
	"context"
)

const createBatchItem = `-- name: CreateBatchItem :one
INSERT INTO batch_items (
                         amount,
                         inventory_item_id,
                         formula_ingredient_id,
                         batch_id,
                         user_id,
                         description

) VALUES (
             $1, $2, $3, $4, $5, $6
         ) RETURNING id, amount, inventory_item_id, formula_ingredient_id, batch_id, user_id, description, created_at, updated_at
`

type CreateBatchItemParams struct {
	Amount              int32  `json:"amount"`
	InventoryItemID     int64  `json:"inventoryItemID"`
	FormulaIngredientID int64  `json:"formulaIngredientID"`
	BatchID             int64  `json:"batchID"`
	UserID              int64  `json:"userID"`
	Description         string `json:"description"`
}

func (q *Queries) CreateBatchItem(ctx context.Context, arg CreateBatchItemParams) (BatchItem, error) {
	row := q.db.QueryRowContext(ctx, createBatchItem,
		arg.Amount,
		arg.InventoryItemID,
		arg.FormulaIngredientID,
		arg.BatchID,
		arg.UserID,
		arg.Description,
	)
	var i BatchItem
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.InventoryItemID,
		&i.FormulaIngredientID,
		&i.BatchID,
		&i.UserID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBatchItem = `-- name: DeleteBatchItem :exec
DELETE FROM batch_items
WHERE id = $1
`

func (q *Queries) DeleteBatchItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBatchItem, id)
	return err
}

const getBatchItem = `-- name: GetBatchItem :one
SELECT id, amount, inventory_item_id, formula_ingredient_id, batch_id, user_id, description, created_at, updated_at FROM batch_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBatchItem(ctx context.Context, id int64) (BatchItem, error) {
	row := q.db.QueryRowContext(ctx, getBatchItem, id)
	var i BatchItem
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.InventoryItemID,
		&i.FormulaIngredientID,
		&i.BatchID,
		&i.UserID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBatchItemsByUserId = `-- name: ListBatchItemsByUserId :many
SELECT id, amount, inventory_item_id, formula_ingredient_id, batch_id, user_id, description, created_at, updated_at FROM batch_items
WHERE batch_id = $1
ORDER BY id
`

func (q *Queries) ListBatchItemsByUserId(ctx context.Context, batchID int64) ([]BatchItem, error) {
	rows, err := q.db.QueryContext(ctx, listBatchItemsByUserId, batchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BatchItem{}
	for rows.Next() {
		var i BatchItem
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.InventoryItemID,
			&i.FormulaIngredientID,
			&i.BatchID,
			&i.UserID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBatchItem = `-- name: UpdateBatchItem :one
UPDATE batch_items
SET (amount,
     inventory_item_id,
     formula_ingredient_id,
     batch_id,
     user_id,
     description) =
        ($2, $3, $4, $5, $6, $7)
WHERE id = $1
RETURNING id, amount, inventory_item_id, formula_ingredient_id, batch_id, user_id, description, created_at, updated_at
`

type UpdateBatchItemParams struct {
	ID                  int64  `json:"id"`
	Amount              int32  `json:"amount"`
	InventoryItemID     int64  `json:"inventoryItemID"`
	FormulaIngredientID int64  `json:"formulaIngredientID"`
	BatchID             int64  `json:"batchID"`
	UserID              int64  `json:"userID"`
	Description         string `json:"description"`
}

func (q *Queries) UpdateBatchItem(ctx context.Context, arg UpdateBatchItemParams) (BatchItem, error) {
	row := q.db.QueryRowContext(ctx, updateBatchItem,
		arg.ID,
		arg.Amount,
		arg.InventoryItemID,
		arg.FormulaIngredientID,
		arg.BatchID,
		arg.UserID,
		arg.Description,
	)
	var i BatchItem
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.InventoryItemID,
		&i.FormulaIngredientID,
		&i.BatchID,
		&i.UserID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
