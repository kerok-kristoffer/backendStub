name: Deploy to production

on:
  push:
    branches: [ master ]

jobs:

  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.3
        id: go

      - name: Check out code
        uses: actions/checkout@v2

      - name: Install Sqlc
        run: go install github.com/kyleconroy/sqlc/cmd/sqlc@latest

      - name: Generate Sqlc
        run: sqlc generate

      - name: Install mockgen
        run: go install github.com/golang/mock/mockgen@v1.6.0

      - name: Generate mockgen UserAccount
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          go mod download github.com/golang/mock
          mockgen -package mockdb -destination db/mock/user_account.go github.com/kerok-kristoffer/formulating/db/sqlc UserAccount

      - name: Tidy
        run: go mod tidy

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: formulating
          IMAGE_TAG: ${{ github.sha }}

        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
